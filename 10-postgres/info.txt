1. PRIMARY KEY (Первичный ключ)
Что это? Главный уникальный идентификатор для каждой строки в таблице.

Для чего? Обеспечивает целостность данных: гарантирует, что:

Ни одно значение в этом столбце не повторяется (уникальность).

Ни одно значение в этом столбце не может быть пустым (NOT NULL).

Пример:

sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY, -- 'id' - первичный ключ
    username VARCHAR(50)
);
В таблице users не может быть двух пользователей с одинаковым id, и у каждой новой записи он должен быть обязательно.

2. UNIQUE (Уникальность)
Что это? Ограничение, которое гарантирует, что все значения в столбце (или комбинации столбцов) будут разными.

Отличие от PRIMARY KEY: Столбцу с UNIQUE разрешено содержать значение NULL (но обычно только одно, если это не оговорено особо).

Пример:

sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL, -- 'email' должен быть уникальным
    username VARCHAR(50)
);
Не может быть двух пользователей с одинаковым email.

3. NOT NULL (Не пустое)
Что это? Самое простое ограничение. Оно требует, чтобы в столбце всегда было какое-то значение. Его нельзя оставить пустым.

Пример:

sql
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL, -- 'username' обязан быть заполнен
    email VARCHAR(100) UNIQUE NOT NULL
);
При попытке добавить пользователя без username или email возникнет ошибка.

4. CHECK (Проверка условия)
Что это? Ограничение, которое позволяет проверить значение по любому логическому условию перед тем, как оно будет записано в таблицу.

Для чего? Чтобы данные соответствовали бизнес-правилам (например, возраст > 0, цена >= 0).

Пример:

sql
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price NUMERIC CHECK (price >= 0) -- Цена не может быть отрицательной
);
5. FOREIGN KEY / REFERENCES (Внешний ключ / Ссылка) ⭐ — КАК В ВАШЕМ ПРИМЕРЕ
Что это? Создает связь между двумя таблицами. Столбец в одной таблице ссылается на первичный ключ (PRIMARY KEY) в другой таблице.

Для чего? Для обеспечения ссылочной целостности. Это основа для связей "один-ко-многим" или "многие-ко-многим".

Как читать вашу строку:

sql
user_id INTEGER REFERENCES users(id),
user_id - это имя столбца в текущей таблице.

INTEGER - тип данных этого столбца. Он должен совпадать с типом столбца, на который ссылается (обычно это INT или BIGINT для SERIAL).

REFERENCES - ключевое слово, указывающее на внешний ключ.

users(id) - указывает на таблицу users и ее столбец id.

Что это означает на практике?

Нельзя вставить user_id, которого нет в таблице users в столбце id.

Нельзя удалить пользователя из таблицы users, если на его id есть ссылки в этой таблице (если не используются опции ON DELETE, о которых ниже).

Где используется? Например, в таблице постов или заказов, где нужно указать, какому пользователю они принадлежат.

sql
CREATE TABLE posts (
    post_id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    -- Этот столбец ссылается на id в таблице users
    author_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT NOW()
);
Дополнительные опции (очень важные!):

ON DELETE CASCADE: Если запись в users удаляется, то все связанные с ней посты в таблице posts будут удалены автоматически.

ON DELETE SET NULL: Если запись в users удаляется, то author_id в связанных постах будет установлен в NULL (для этого столбец author_id должен быть объявлен как NULL, то есть без NOT NULL).

ON DELETE RESTRICT (по умолчанию): Запрещает удаление записи в users, если на нее есть ссылки. Сначала нужно удалить или изменить все связанные посты.

Итог для вашей строки:
Строка user_id INTEGER REFERENCES users(id) в определении таблицы означает:

"Создать столбец с именем user_id, который будет хранить целые числа (INTEGER). Каждое значение в этом столбце обязано существовать в столбце id таблицы users. Это необходимо для поддержания целостности связей между данными в двух таблицах."

Это классический пример связи "один-ко-многим": один пользователь (из users) может иметь много записей (например, заказов, сообщений, постов) в этой новой таблице.